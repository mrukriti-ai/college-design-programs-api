"""
Add Function Module

This module provides a comprehensive add function with various features including:
- Type hints for better code documentation
- Error handling for invalid inputs
- Support for different numeric types
- Comprehensive documentation with examples
- Unit tests

Author: Generated by AI Assistant
Date: 2024
"""

from typing import Union, List, Tuple
import math


def add(a: Union[int, float], b: Union[int, float]) -> Union[int, float]:
    """
    Add two numbers together.
    
    This function takes two numeric values and returns their sum. It supports
    both integers and floating-point numbers. The function includes proper
    error handling and type checking.
    
    Args:
        a (Union[int, float]): The first number to add
        b (Union[int, float]): The second number to add
        
    Returns:
        Union[int, float]: The sum of a and b
        
    Raises:
        TypeError: If either argument is not a number
        ValueError: If the arguments are not valid numeric values
        
    Examples:
        >>> add(5, 3)
        8
        >>> add(3.14, 2.86)
        6.0
        >>> add(-5, 10)
        5
        >>> add(0, 0)
        0
        
    Note:
        - For floating-point numbers, the result maintains precision
        - Integer addition returns an integer
        - Mixed type addition (int + float) returns a float
    """
    # Type checking
    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
        raise TypeError("Both arguments must be numbers (int or float)")
    
    # Check for special numeric values
    if math.isnan(a) or math.isnan(b):
        raise ValueError("Cannot add NaN values")
    
    if math.isinf(a) or math.isinf(b):
        # Handle infinity cases
        if math.isinf(a) and math.isinf(b):
            if a == b:  # Both positive or both negative infinity
                return a
            else:  # Positive + negative infinity
                raise ValueError("Cannot add positive and negative infinity")
        else:
            return a if math.isinf(a) else b
    
    # Perform addition
    result = a + b
    
    # Return integer if result is whole number
    if isinstance(result, float) and result.is_integer():
        return int(result)
    
    return result


def add_multiple(*args: Union[int, float]) -> Union[int, float]:
    """
    Add multiple numbers together.
    
    This function can take any number of numeric arguments and returns
    their sum. It's useful for adding more than two numbers at once.
    
    Args:
        *args (Union[int, float]): Variable number of numbers to add
        
    Returns:
        Union[int, float]: The sum of all provided numbers
        
    Raises:
        TypeError: If any argument is not a number
        ValueError: If no arguments are provided or if any argument is NaN
        
    Examples:
        >>> add_multiple(1, 2, 3, 4, 5)
        15
        >>> add_multiple(1.5, 2.5, 3.0)
        7.0
        >>> add_multiple(10)
        10
        >>> add_multiple()
        Traceback (most recent call last):
        ValueError: At least one number must be provided
    """
    if not args:
        raise ValueError("At least one number must be provided")
    
    # Check all arguments are numbers
    for arg in args:
        if not isinstance(arg, (int, float)):
            raise TypeError(f"All arguments must be numbers, got {type(arg).__name__}")
        if math.isnan(arg):
            raise ValueError("Cannot add NaN values")
    
    # Handle infinity cases
    infinities = [arg for arg in args if math.isinf(arg)]
    if infinities:
        if len(infinities) == 1:
            return infinities[0]
        else:
            # Check if we have both positive and negative infinity
            has_positive = any(math.isinf(arg) and arg > 0 for arg in args)
            has_negative = any(math.isinf(arg) and arg < 0 for arg in args)
            if has_positive and has_negative:
                raise ValueError("Cannot add positive and negative infinity")
            return infinities[0]
    
    # Perform addition
    result = sum(args)
    
    # Return integer if result is whole number
    if isinstance(result, float) and result.is_integer():
        return int(result)
    
    return result


def add_list(numbers: List[Union[int, float]]) -> Union[int, float]:
    """
    Add all numbers in a list.
    
    This function takes a list of numbers and returns their sum.
    It's a convenient wrapper around add_multiple for list inputs.
    
    Args:
        numbers (List[Union[int, float]]): List of numbers to add
        
    Returns:
        Union[int, float]: The sum of all numbers in the list
        
    Raises:
        TypeError: If the input is not a list or contains non-numeric values
        ValueError: If the list is empty or contains NaN values
        
    Examples:
        >>> add_list([1, 2, 3, 4, 5])
        15
        >>> add_list([1.5, 2.5, 3.0])
        7.0
        >>> add_list([])
        Traceback (most recent call last):
        ValueError: List cannot be empty
    """
    if not isinstance(numbers, list):
        raise TypeError("Input must be a list")
    
    if not numbers:
        raise ValueError("List cannot be empty")
    
    return add_multiple(*numbers)


def add_with_rounding(a: Union[int, float], b: Union[int, float], 
                     decimal_places: int = 2) -> float:
    """
    Add two numbers and round the result to specified decimal places.
    
    This function is useful when you need precise control over the
    number of decimal places in the result.
    
    Args:
        a (Union[int, float]): The first number to add
        b (Union[int, float]): The second number to add
        decimal_places (int, optional): Number of decimal places to round to. Defaults to 2.
        
    Returns:
        float: The rounded sum of a and b
        
    Raises:
        TypeError: If arguments are not numbers or decimal_places is not an integer
        ValueError: If decimal_places is negative
        
    Examples:
        >>> add_with_rounding(3.14159, 2.71828)
        5.86
        >>> add_with_rounding(3.14159, 2.71828, 4)
        5.8599
        >>> add_with_rounding(5, 3, 0)
        8.0
    """
    if not isinstance(decimal_places, int):
        raise TypeError("decimal_places must be an integer")
    
    if decimal_places < 0:
        raise ValueError("decimal_places cannot be negative")
    
    result = add(a, b)
    return round(float(result), decimal_places)


# Example usage and demonstration
if __name__ == "__main__":
    print("ðŸ§® Add Function Demonstration")
    print("=" * 40)
    
    # Basic addition examples
    print("Basic Addition:")
    print(f"add(5, 3) = {add(5, 3)}")
    print(f"add(3.14, 2.86) = {add(3.14, 2.86)}")
    print(f"add(-5, 10) = {add(-5, 10)}")
    print(f"add(0, 0) = {add(0, 0)}")
    print()
    
    # Multiple number addition
    print("Multiple Number Addition:")
    print(f"add_multiple(1, 2, 3, 4, 5) = {add_multiple(1, 2, 3, 4, 5)}")
    print(f"add_multiple(1.5, 2.5, 3.0) = {add_multiple(1.5, 2.5, 3.0)}")
    print()
    
    # List addition
    print("List Addition:")
    numbers = [1, 2, 3, 4, 5]
    print(f"add_list({numbers}) = {add_list(numbers)}")
    float_numbers = [1.5, 2.5, 3.0]
    print(f"add_list({float_numbers}) = {add_list(float_numbers)}")
    print()
    
    # Addition with rounding
    print("Addition with Rounding:")
    print(f"add_with_rounding(3.14159, 2.71828) = {add_with_rounding(3.14159, 2.71828)}")
    print(f"add_with_rounding(3.14159, 2.71828, 4) = {add_with_rounding(3.14159, 2.71828, 4)}")
    print()
    
    # Error handling examples
    print("Error Handling Examples:")
    try:
        add("5", 3)
    except TypeError as e:
        print(f"TypeError caught: {e}")
    
    try:
        add_multiple()
    except ValueError as e:
        print(f"ValueError caught: {e}")
    
    try:
        add_list([])
    except ValueError as e:
        print(f"ValueError caught: {e}")
    
    print("\nâœ… Add function demonstration completed!") 